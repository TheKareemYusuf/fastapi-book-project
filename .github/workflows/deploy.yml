name: CD

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v4

      # Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to Google Cloud
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # Setup gcloud CLI
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Configure docker to use gcloud credentials
      - name: Configure Docker Client
        run: |
          gcloud auth configure-docker ${{ secrets.GAR_LOCATION }}-docker.pkg.dev --quiet

      # Build and push the Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/fastapi-book-project/fastapi-app:latest

      # Debug SSH key
      - name: Debug SSH key
        run: |
          echo "Setting up SSH key..."
          mkdir -p ~/.ssh
          # Save key with explicit newlines
          echo "${{ secrets.VM_SSH_KEY }}" | sed 's/\\n/\n/g' > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo "Checking key format..."
          if ! grep -q "BEGIN OPENSSH PRIVATE KEY" ~/.ssh/deploy_key; then
            echo "Error: Key does not contain the expected header"
            echo "Please make sure the key starts with '-----BEGIN OPENSSH PRIVATE KEY-----'"
            exit 1
          fi
          if ! grep -q "END OPENSSH PRIVATE KEY" ~/.ssh/deploy_key; then
            echo "Error: Key does not contain the expected footer"
            echo "Please make sure the key ends with '-----END OPENSSH PRIVATE KEY-----'"
            exit 1
          fi
          ssh-keygen -l -f ~/.ssh/deploy_key || {
            echo "Error: Invalid key format"
            echo "Please make sure you've copied the entire key including headers and footers"
            exit 1
          }

      - name: Deploy to GCP VM
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VM_IP }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
          script_stop: true
          debug: true
          script: |
            # Pull the latest image
            docker pull ${{ secrets.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/fastapi-book-project/fastapi-app:latest
            
            # Stop and remove existing containers
            docker stop fastapi-app || true
            docker rm fastapi-app || true
            
            # Create network if it doesn't exist
            docker network create fastapi-network || true
            
            # Run the FastAPI container
            docker run -d \
              --name fastapi-app \
              --network fastapi-network \
              --restart unless-stopped \
              ${{ secrets.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/fastapi-book-project/fastapi-app:latest
            
            # Setup Nginx configuration
            sudo tee /etc/nginx/sites-available/fastapi << EOF
            server {
                listen 80;
                server_name _;
            
                location / {
                    proxy_pass http://fastapi-app:8000;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOF
            
            # Enable the site and restart Nginx
            sudo ln -sf /etc/nginx/sites-available/fastapi /etc/nginx/sites-enabled/
            sudo nginx -t && sudo systemctl restart nginx